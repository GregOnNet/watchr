$ErrorActionPreference = 'Stop'

$scriptPath = Split-Path -parent $MyInvocation.MyCommand.Definition
Import-Module "$scriptPath\lib\Deployment"
Import-Module WebAdministration

$permissions = @{
  '' = @{
    "FullControl" = @(
      $(ConvertTo-UserName([System.Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid)),
      $(ConvertTo-UserName([System.Security.Principal.WellKnownSidType]::LocalSystemSid))
    )
  }
  'bin' = @{
    "ReadAndExecute" = @(
      'IUSR'
      'IIS_IUSRs'
    )
  }
  'logs' = @{
    "Modify" = @(
      'IIS_IUSRs'
    )
  }
}

$appPool = 'GROSSWEBER Watchr @configatron.env@'
# One of these: SpecificUser|NetworkService|LocalService|LocalSystem
$appPoolIdentity = 'NetworkService'

$siteName = '(agross) <%= configatron.deployment.bindings.first[:host] %>'
$bindings = @(
<% configatron.deployment.bindings.each do |binding| %>
  @{ Protocol = '<%= binding[:protocol] %>'; HostHeader = '<%= binding[:host] %>'; Port = <%= binding[:port] || 80 %> }
<% end %>
)
$physicalPath = "$scriptPath\bin"

function Recreate-WebAppPool {
  param (
    [string] $Name = $(throw "Name is missing")
  )

  # -ErrorAction SilentlyContinue override does not work here for some reason.
  $ErrorActionPreference = 'SilentlyContinue'
  Remove-WebAppPool -Name $Name
  $ErrorActionPreference = 'Stop'

  return New-WebAppPool -Name $Name
}

function Recreate-WebSite
{
  [CmdletBinding()]
  param (
    [Parameter(Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [string] $Name,
    [Parameter(Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [string] $Pool,
    [Parameter(Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [string] $PhysicalPath,
    [Parameter(Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [string] $LogDirectory
  )

  # -ErrorAction SilentlyContinue override does not work here for some reason.
  $ErrorActionPreference = 'SilentlyContinue'
  Remove-WebSite -Name $Name
  $ErrorActionPreference = 'Stop'

  $Site = New-WebSite -Name $Name -ApplicationPool $Pool -PhysicalPath $PhysicalPath
  Set-ItemProperty IIS:\Sites\$Name LogFile.Directory $LogDirectory

  return $Site
}

function Check-HttpResponse {
  $tests = @{
    <%
      require 'uri'
      bindings = configatron.deployment.bindings

      bindings.select { |b| b.fetch(:test_while_deployment, true) }.each do |binding|
        url = URI::HTTP.new(binding[:protocol], nil, binding[:host], binding[:port], nil, '/', nil, nil, nil).to_s
        response_url = configatron.deployment.canoncial_url
    %>
    '<%= url %>' = @{
      Url = '<%= url %>'
      Method = 'GET'
      Expect = @{ StatusCode = 200; Url = '<%= response_url %>' }
    };
    <% end %>
  }

  $tests.GetEnumerator() | ForEach-Object {
    $url = $_.Value.Url
    $method = $_.Value.Method
    $statusCode = $_.Value.Expect.StatusCode
    $resultUrl = $_.Value.Expect.Url

    Write-Host "Testing $($_.Key) at $url with $method, expecting $statusCode at $resultUrl"

    $request = [System.Net.HttpWebRequest]::Create($url)
    $request.AllowAutoRedirect = $true
    $request.Method = $method
    try
    {
      $response = $request.GetResponse()
    }
    catch [System.Net.WebException]
    {
      if ($_.Exception.Response -eq $null)
      {
        throw
      }
      $response = $_.Exception.Response
    }

    $status = $response.StatusCode
    $responseUri = $response.ResponseUri.ToString()
    $response.Close()

    if ($status -ne $statusCode)
    {
      throw ("Expected HTTP status code $statusCode, but got $status")
    }

    if ($responseUri -ne $resultUrl)
    {
      throw ("Expected location $resultUrl, but got $responseUri")
    }
  }
}

function Install {
  Set-Permissions -RootPath $scriptPath -Permissions $permissions

  Exec { & "$scriptPath\tools\Web Platform Installer\WebpiCmd.exe" /Install "/Products:NETFramework451,MVC4Vs2010_Loc" /SuppressReboot /AcceptEula }

  $pool = Recreate-WebAppPool -Name $appPool
  $pool.processModel.identityType = $appPoolIdentity
  $pool.managedRuntimeVersion = "v4.0"
  $pool | Set-Item

  $site = Recreate-WebSite -Name $siteName -Pool $pool.Name -PhysicalPath $physicalPath -LogDirectory $([System.IO.Path]::GetFullPath($(Join-Path $ScriptPath 'logs')))

  Get-WebBinding -Name $site.Name | Remove-WebBinding
  $bindings | ForEach-Object {
    New-WebBinding -Name $site.Name -Protocol $_.Protocol -HostHeader $_.HostHeader -Port $_.Port
  }

  Start-Website -Name $site.Name

  Check-HttpResponse

  Write-Host "Installed Web Site $siteName"
}

# Runs all command line arguments as functions.
$args | ForEach-Object { & $_ }
